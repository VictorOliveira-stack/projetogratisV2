<div>
    <a href="/home">Home</a>
</div>
<div>
    <a href="/alltables?">tables</a>
</div>
<h1>vendas</h1>

 <form action="/createvendastable" method="post">

    <div>
        <label for="tablesname">Insert the name table</label><br>
        <input id="inputVendas" name="tablesname" type="text" value="vendas" oninput="manterPalavra()" placeholder="Insert name table">

    </div>
    <input type="submit" value="create table">

    <script>
  function manterPalavra() {
    const input = document.getElementById('inputVendas');
    const valorAtual = input.value;
    const palavraFixa = 'vendas';

    // Se o valor não começar com "vendas", corrija
    if (!valorAtual.startsWith(palavraFixa)) {
      // Se o usuário apagou tudo, restaure apenas a palavra
      if (valorAtual.length < palavraFixa.length) {
        input.value = palavraFixa;
      } else {
        // Se o usuário apagou o começo, adicione a palavra de volta
        const textoRestante = valorAtual.substring(palavraFixa.length);
        input.value = palavraFixa + textoRestante;
      }
    }
  }
</script>
   
</form> 

<!--
<div>
    {{#each tables}}
<div>
    <div class="tabela-arrastavel" draggable="true" data-tablename="{{this.name}}">
        
            <a href="/showtablevendas/{{this.name}}">{{this.name}}</a>
       
    </div>

    <div>
        <form action="/altertablevendas" method="get">
            <input type="hidden" name="tablesname" value="{{this.name}}">
            <input type="submit" value="editar" >

        </form>

        <form action="/droptablevendas" method="post">
             <input type="hidden" name="tablesname" value="{{this.name}}">  <!-- ../ (foi crucial aqui para funcionar poois nao estava funcionando de forma alguma) -->
            
           <!-- <input type="submit" value="delet" > -->
            <!--<input type="submit" value="Delete Table" onclick="return confirm('Are you sure you want to delete this table?');">
        </form>
    </div>    
</div>
{{/each}}
</div>-->

<div id="tabelas-disponiveis" style="border: 1px solid #ccc; padding: 10px; min-height: 100px;">
    <h2>Tabelas Disponíveis</h2>
    {{#each tables}}
    <div class="tabela-arrastavel" draggable="true" data-tablename="{{this.name}}" style="margin: 5px; padding: 5px; border: 1px solid blue; background-color: #e0e0ff; display: inline-block; cursor: grab;">
       <a href="/showtablevendas/{{this.name}}">{{this.name}}</a>
    </div>
    {{/each}}
</div>

<div id="dashboard-area" style="border: 2px dashed gray; padding: 20px; margin-top: 20px; min-height: 300px; background-color: #f9f9f9;">
    <h2>Seu Dashboard de Vendas</h2>
    <p>Arraste as tabelas de venda aqui para visualizar os totais e gerar o gráfico.</p>

    <div id="dashboard-content" style="display: flex; flex-wrap: wrap; gap: 15px; margin-bottom: 20px;">
        </div>

    <div id="chart-container" style="width: 80%; height: 400px; margin: auto; border: 1px solid #ddd; padding: 10px; background-color: white;">
        <canvas id="myChart"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="/seu-caminho-para-o-script.js"></script> ```


<div id="dashboard-area">
    <h2>Seu Dashboard de Vendas</h2>
    <p>Arraste as tabelas de venda aqui para visualizar os totais.</p>
</div>




<!--biblioteca chart.js-->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!--drag-->
<script>
  const arrastaveis = document.querySelectorAll('.tabela-arrastavel');
const dashboard = document.getElementById('dashboard-area');
const dashboardContent = document.getElementById('dashboard-content'); // Uma nova div para os cards
const chartContainer = document.getElementById('chart-container'); // Uma nova div para o gráfico
const chartCanvas = document.getElementById('myChart'); // O canvas onde o Chart.js vai desenhar

let salesData = []; // Array para armazenar os dados de vendas de cada tabela arrastada
let myChartInstance = null; // Para guardar a instância do gráfico e poder atualizá-lo

arrastaveis.forEach(tabela => {
    tabela.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text/plain', e.currentTarget.dataset.tablename);
    });
});

dashboard.addEventListener('dragover', (e) => {
    e.preventDefault();
});

dashboard.addEventListener('drop', (e) => {
    e.preventDefault();
    const tableName = e.dataTransfer.getData('text/plain');

    if (!tableName) {
        console.error("Nome da tabela não foi encontrado.");
        return;
    }

    // Verifica se a tabela já foi adicionada ao dashboard para evitar duplicatas
    if (salesData.some(item => item.tableName === tableName)) {
        console.log(`Tabela '${tableName}' já adicionada.`);
        return;
    }

    fetch(`/get-totals/${tableName}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            // Adiciona os dados da tabela ao array salesData
            salesData.push({
                tableName: tableName,
                valorTotal: data.valorTotal || 0, // Garante que é um número, mesmo se null
                quantidadeTotal: data.quantidadeTotal || 0 // Garante que é um número
            });

            // Opcional: Crie um card para mostrar os totais individualmente
            const newCard = document.createElement('div');
            newCard.className = 'dashboard-card'; // Adicione uma classe para estilização
            newCard.innerHTML = `<h3>${tableName}</h3>
                                 <p>Valor Total: R$ ${parseFloat(data.valorTotal || 0).toFixed(2)}</p>
                                 <p>Quantidade Total: ${data.quantidadeTotal || 0}</p>`;
            dashboardContent.appendChild(newCard);


            // Atualiza ou cria o gráfico
            updateChart();
        })
        .catch(error => console.error('Erro ao buscar dados ou gerar gráfico:', error));
});


function updateChart() {
    const labels = salesData.map(item => item.tableName);
    const valores = salesData.map(item => item.valorTotal);
    const quantidades = salesData.map(item => item.quantidadeTotal);

    // Se já existe uma instância do gráfico, destrua-a para recriar
    if (myChartInstance) {
        myChartInstance.destroy();
    }

    // Garante que o canvas existe e está visível
    if (!chartCanvas) {
        console.error("Canvas para o gráfico não encontrado!");
        return;
    }

    const ctx = chartCanvas.getContext('2d');
    myChartInstance = new Chart(ctx, {
        type: 'bar', // Tipo de gráfico de coluna
        data: {
            labels: labels, // Nomes das tabelas
            datasets: [{
                label: 'Valor Total das Vendas (R$)',
                data: valores,
                backgroundColor: 'rgba(75, 192, 192, 0.6)', // Cor das barras
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            },
            {
                label: 'Quantidade Total Vendida',
                data: quantidades,
                backgroundColor: 'rgba(153, 102, 255, 0.6)', // Outra cor
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1
            }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false, // Permite que o gráfico se ajuste ao tamanho do container
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Valor / Quantidade'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Tabelas de Vendas'
                    }
                }
            },
            plugins: {
                title: {
                    display: true,
                    text: 'Dashboard de Vendas por Tabela'
                }
            }
        }
    });
}
</script>





